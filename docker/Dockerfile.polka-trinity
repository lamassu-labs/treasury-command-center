# Polka-Trinity Ultimate AI Governance Intelligence
# Production Docker container for trillion-parameter governance analysis
# 
# Strategic Advantage:
# - 1.3+ trillion parameters (DeepSeek-R1:671b + Llama4:maverick + Qwen3:235b)
# - $3.6M-6M annual savings vs cloud AI equivalents  
# - Complete infrastructure sovereignty via Multi-Xnode architecture
# - Sub-5s response times for flagship model coordination

FROM python:3.11-slim as base

# Enterprise metadata
LABEL maintainer="Nuru AI Ultimate Trinity Team"
LABEL description="Polka-Trinity Ultimate AI Governance Intelligence"
LABEL version="1.0.0"
LABEL infrastructure="Multi-Xnode Sovereign Architecture"
LABEL ai_models="DeepSeek-R1:671b + Llama4:maverick + Qwen3:235b"
LABEL cost_advantage="$3.6M-6M annual savings vs cloud AI"

# Enterprise environment variables
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONPATH=/app
ENV TZ=UTC

# Multi-Xnode configuration
ENV PRIVACY_XNODE=23.92.65.57
ENV PERFORMANCE_XNODE=23.92.65.18
ENV TRINITY_ENDPOINT=http://23.92.65.18:11434
ENV UNIFIED_ACCESS=https://chat.nuru.network

# Enterprise security and performance
ENV WORKER_PROCESSES=4
ENV WORKER_CONNECTIONS=1000
ENV MAX_REQUESTS=10000
ENV REQUEST_TIMEOUT=30
ENV KEEP_ALIVE=5

# Create enterprise user for security
RUN groupadd -r nuruai && useradd -r -g nuruai -s /bin/false nuruai

# Install system dependencies for enterprise deployment
RUN apt-get update && apt-get install -y \
    curl \
    netcat-traditional \
    procps \
    htop \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy requirements first for layer caching
COPY requirements.txt requirements-prod.txt ./

# Install Python dependencies with enterprise optimizations
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt && \
    pip install --no-cache-dir -r requirements-prod.txt

# Copy application code
COPY src/ ./src/
COPY tests/ ./tests/
COPY scripts/ ./scripts/

# Copy configuration files
COPY docker/entrypoint.sh ./
COPY docker/health-check.sh ./
COPY docker/monitoring/ ./monitoring/

# Set permissions for enterprise security
RUN chmod +x entrypoint.sh health-check.sh && \
    chown -R nuruai:nuruai /app

# Enterprise health check for orchestration
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD ./health-check.sh

# Expose API port (Enhanced Event API)
EXPOSE 8099

# Switch to non-root user for security
USER nuruai

# Enterprise entrypoint with graceful shutdown
ENTRYPOINT ["./entrypoint.sh"]

# Default command: Ultimate AI Trinity coordination
CMD ["python", "-m", "uvicorn", "src.backend.polka_trinity_api:app", \
     "--host", "0.0.0.0", \
     "--port", "8099", \
     "--workers", "4", \
     "--worker-class", "uvicorn.workers.UvicornWorker", \
     "--access-log", \
     "--log-level", "info"]

# Multi-stage build for production optimization
FROM base as production

# Enterprise production optimizations
ENV ENVIRONMENT=production
ENV DEBUG=false
ENV LOG_LEVEL=info

# Copy only necessary files for production
COPY --from=base /app /app

# Production-specific configurations
RUN pip install --no-cache-dir gunicorn[gthread] prometheus-client

# Ultimate AI Trinity production command
CMD ["gunicorn", "src.backend.polka_trinity_api:app", \
     "--bind", "0.0.0.0:8099", \
     "--workers", "4", \
     "--worker-class", "uvicorn.workers.UvicornWorker", \
     "--worker-connections", "1000", \
     "--max-requests", "10000", \
     "--max-requests-jitter", "1000", \
     "--timeout", "30", \
     "--keep-alive", "5", \
     "--access-logfile", "-", \
     "--error-logfile", "-", \
     "--log-level", "info", \
     "--preload"]