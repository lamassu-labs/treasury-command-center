# Polka-Trinity Ultimate AI Governance Intelligence
# Docker Compose for production deployment with Multi-Xnode coordination
#
# Strategic Infrastructure:
# - Ultimate AI Trinity: 1.3+ trillion parameters
# - Multi-Xnode Architecture: Privacy (23.92.65.57) + Performance (23.92.65.18)
# - Enterprise Monitoring: Prometheus + Grafana + AlertManager
# - Cost Advantage: $3.6M-6M annual savings vs cloud AI

version: '3.8'

services:
  # Ultimate AI Trinity Governance Intelligence
  polka-trinity:
    build:
      context: ..
      dockerfile: docker/Dockerfile.polka-trinity
      target: production
    container_name: polka-trinity-ultimate-ai
    restart: unless-stopped
    ports:
      - "8099:8099"  # Enhanced Event API port
    environment:
      # Multi-Xnode Configuration
      - PRIVACY_XNODE=23.92.65.57
      - PERFORMANCE_XNODE=23.92.65.18
      - TRINITY_ENDPOINT=http://23.92.65.18:11434
      - UNIFIED_ACCESS=https://chat.nuru.network
      
      # Enterprise Configuration
      - ENVIRONMENT=production
      - LOG_LEVEL=info
      - WORKER_PROCESSES=4
      - MAX_CONCURRENT_ANALYSES=10
      
      # Database Configuration
      - DATABASE_URL=${DATABASE_URL:-postgresql://polka_user:polka_pass@postgres:5432/polka_trinity}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
      
      # Security Configuration
      - API_SECRET_KEY=${API_SECRET_KEY}
      - CORS_ORIGINS=${CORS_ORIGINS:-https://chat.nuru.network,https://polka-trinity.nuru.network}
      
      # Monitoring Configuration
      - ENABLE_METRICS=true
      - METRICS_PORT=9090
      - HEALTH_CHECK_INTERVAL=30
      
    volumes:
      - ./logs:/app/logs
      - ./config:/app/config:ro
    networks:
      - polka-trinity-network
    depends_on:
      - postgres
      - redis
      - prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8099/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    labels:
      - "com.nuru.ai.service=polka-trinity"
      - "com.nuru.ai.version=1.0.0"
      - "com.nuru.ai.infrastructure=ultimate-ai-trinity"
      - "com.nuru.ai.parameters=1.3T+"

  # PostgreSQL Database for Enterprise Data
  postgres:
    image: postgres:15-alpine
    container_name: polka-trinity-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=polka_trinity
      - POSTGRES_USER=polka_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-polka_pass_secure_2025}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --locale=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - polka-trinity-network
    ports:
      - "5432:5432"
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U polka_user -d polka_trinity"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis for Enterprise Caching and Session Management
  redis:
    image: redis:7-alpine
    container_name: polka-trinity-redis
    restart: unless-stopped
    command: >
      redis-server 
      --appendonly yes 
      --maxmemory 1gb 
      --maxmemory-policy allkeys-lru
      --timeout 300
      --tcp-keepalive 60
    volumes:
      - redis_data:/data
    networks:
      - polka-trinity-network
    ports:
      - "6379:6379"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for Enterprise Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: polka-trinity-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/alerts.yml:/etc/prometheus/alerts.yml:ro
      - prometheus_data:/prometheus
    networks:
      - polka-trinity-network
    ports:
      - "9090:9090"
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Grafana for Enterprise Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: polka-trinity-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-ultimate_trinity_2025}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
      - GF_SERVER_ROOT_URL=https://grafana.polka-trinity.nuru.network
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - polka-trinity-network
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M

  # AlertManager for Enterprise Alerting
  alertmanager:
    image: prom/alertmanager:latest
    container_name: polka-trinity-alertmanager
    restart: unless-stopped
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=https://alerts.polka-trinity.nuru.network'
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/config.yml:ro
      - alertmanager_data:/alertmanager
    networks:
      - polka-trinity-network
    ports:
      - "9093:9093"
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 256M

  # Nginx Reverse Proxy for Enterprise Load Balancing
  nginx:
    image: nginx:alpine
    container_name: polka-trinity-nginx
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    networks:
      - polka-trinity-network
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - polka-trinity
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Log Aggregation for Enterprise Monitoring
  loki:
    image: grafana/loki:latest
    container_name: polka-trinity-loki
    restart: unless-stopped
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./monitoring/loki.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    networks:
      - polka-trinity-network
    ports:
      - "3100:3100"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M

  # Log Shipping Agent
  promtail:
    image: grafana/promtail:latest
    container_name: polka-trinity-promtail
    restart: unless-stopped
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - ./monitoring/promtail.yml:/etc/promtail/config.yml:ro
      - ./logs:/var/log/polka-trinity:ro
      - /var/log:/var/log/host:ro
    networks:
      - polka-trinity-network
    depends_on:
      - loki
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M

# Enterprise Network Configuration
networks:
  polka-trinity-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    labels:
      - "com.nuru.ai.network=polka-trinity"
      - "com.nuru.ai.infrastructure=ultimate-ai-trinity"

# Persistent Volumes for Enterprise Data
volumes:
  postgres_data:
    driver: local
    labels:
      - "com.nuru.ai.volume=postgres-data"
      - "com.nuru.ai.backup=required"
  
  redis_data:
    driver: local
    labels:
      - "com.nuru.ai.volume=redis-data"
      - "com.nuru.ai.backup=optional"
  
  prometheus_data:
    driver: local
    labels:
      - "com.nuru.ai.volume=prometheus-data"
      - "com.nuru.ai.retention=30d"
  
  grafana_data:
    driver: local
    labels:
      - "com.nuru.ai.volume=grafana-data"
      - "com.nuru.ai.backup=required"
  
  alertmanager_data:
    driver: local
    labels:
      - "com.nuru.ai.volume=alertmanager-data"
      - "com.nuru.ai.backup=optional"
  
  loki_data:
    driver: local
    labels:
      - "com.nuru.ai.volume=loki-data"
      - "com.nuru.ai.retention=7d"